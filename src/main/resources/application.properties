spring.application.name=userservice

spring.jpa.hibernate.ddl-auto=update
spring.datasource.url=jdbc:mysql://localhost:3306/userservice
spring.datasource.username=userservice_user
# No password here, because we grant all privileges to user
# spring.datasource.password=secret
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
# This command if set to true, will show all the sql statements in logs that hibernate is running for us
# So, we are not writing the sql statements, hibernate will write the sql statements for us
# So, we can see those sql statements
spring.jpa.show-sql: true


# OAuth2 Authorization Server configuration

#spring.security.oauth2.authorizationserver.client.oidc-client.registration.client-id=oidc-client
#spring.security.oauth2.authorizationserver.client.oidc-client.registration.client-secret={noop}secret
#spring.security.oauth2.authorizationserver.client.oidc-client.registration.client-authentication-methods[0]=client_secret_basic
#spring.security.oauth2.authorizationserver.client.oidc-client.registration.authorization-grant-types[0]=authorization_code
#spring.security.oauth2.authorizationserver.client.oidc-client.registration.authorization-grant-types[1]=refresh_token
#spring.security.oauth2.authorizationserver.client.oidc-client.registration.redirect-uris[0]=http://127.0.0.1:8080/login/oauth2/code/oidc-client
#spring.security.oauth2.authorizationserver.client.oidc-client.registration.post-logout-redirect-uris[0]=http://127.0.0.1:8080/
#spring.security.oauth2.authorizationserver.client.oidc-client.registration.scopes[0]=openid
#spring.security.oauth2.authorizationserver.client.oidc-client.registration.scopes[1]=profile
#spring.security.oauth2.authorizationserver.client.oidc-client.require-authorization-consent=true


server.port=${SERVER_PORT_NO}
eureka.client.register-with-eureka=true
eureka.client.fetch-registry=true

eureka.client.service-url.defaultZone=http://localhost:8761/eureka


logging.level.root=INFO

